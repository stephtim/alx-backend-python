#!/usr/bin/env bash
# messaging_app/kubctl-0x02
# Usage: ./kubctl-0x02 [target_replicas]
# Default target_replicas = 3
set -euo pipefail

DEPLOY_DIR="messaging_app/kurbeScript"
BLUE_DEPLOY="blue_deployment.yaml"
GREEN_DEPLOY="green_deployment.yaml"
SERVICE_FILE="kubeservice.yaml"

TARGET_REPLICAS="${1:-3}"   # final desired replicas for green (and starting replicas for blue)
STEP_DELAY=8                # seconds to wait between steps

# Helper: check command exists and cluster accessible
if ! command -v kubectl >/dev/null 2>&1; then
  echo "kubectl command not found. Install/configure kubectl."
  exit 1
fi
if ! kubectl get nodes >/dev/null 2>&1; then
  echo "kubectl cannot contact a cluster. Start your cluster (minikube start) and set context."
  exit 1
fi

echo "Applying blue & green deployments and service..."
kubectl apply -f "${DEPLOY_DIR}/${BLUE_DEPLOY}"
kubectl apply -f "${DEPLOY_DIR}/${GREEN_DEPLOY}"
kubectl apply -f "${DEPLOY_DIR}/${SERVICE_FILE}"

echo
echo "Scaling blue deployment to ${TARGET_REPLICAS} replicas (start state)..."
kubectl scale deployment/messaging-app-blue --replicas="${TARGET_REPLICAS}"
echo "Setting green replicas to 0 (keeps it safe until we validate):"
kubectl scale deployment/messaging-app-green --replicas=0

echo
echo "Waiting for blue rollout to finish..."
kubectl rollout status deployment/messaging-app-blue --timeout=120s

echo
echo "Pods (initial):"
kubectl get pods -l app=messaging-app -o wide

# Basic sanity check: check green pod logs if any (likely none)
GREEN_PODS=$(kubectl get pods -l app=messaging-app,version=green -o jsonpath='{.items[*].metadata.name}' || true)
if [ -n "$GREEN_PODS" ]; then
  echo "Green pods present, showing logs:"
  for p in $GREEN_PODS; do
    echo "---- logs: $p ----"
    kubectl logs "$p" || true
  done
fi

echo
echo "Beginning gradual shift: scaling green up from 1..${TARGET_REPLICAS} and scaling blue down accordingly."
echo "This will move traffic proportionally (service selects both versions)."

for i in $(seq 1 "$TARGET_REPLICAS"); do
  GREEN_COUNT=$i
  BLUE_COUNT=$((TARGET_REPLICAS - i))
  echo "Step: green=${GREEN_COUNT}, blue=${BLUE_COUNT}"
  kubectl scale deployment/messaging-app-green --replicas="${GREEN_COUNT}"
  kubectl scale deployment/messaging-app-blue --replicas="${BLUE_COUNT}"
  # Wait for pods to be ready (brief)
  sleep "${STEP_DELAY}"
  echo "Pods now:"
  kubectl get pods -l app=messaging-app -o wide
  echo
  # show logs of green pods to detect new-version errors
  echo "Green pod logs (if any):"
  for pod in $(kubectl get pods -l app=messaging-app,version=green -o jsonpath='{.items[*].metadata.name}' || true); do
    echo "---- logs: $pod ----"
    kubectl logs "$pod" || true
  done
  echo "---- end step ${i} ----"
done

echo
echo "Gradual shift finished. Final pods:"
kubectl get pods -l app=messaging-app -o wide

echo
echo "Optional: if you want to fully switch traffic to green and remove blue:"
echo "  kubectl scale deployment/messaging-app-blue --replicas=0"
echo "  kubectl delete deployment messaging-app-blue  # when safe"
echo
echo "Done."
